En primer lugar ejecutamos el programa, en nuestro caso skipper-64, vemos que nos da un mensaje de error (1), diciendonos que el nombre de nuestro ordenador no es correcto.
Pasaremos a analizar el código ensamblador de nuestro programa, para ello recurrimos a radare2: 
# r2 skipper-64
# aaa /*Analizamos todo el binario en busca de funciones*/
# afl /*Mostramos las funciones*/
# s main /*Buscamos el main y accedemos a él*/
# pdf /*Mostramos el codigo*/
Vemos que el main realiza tres comparaciones (2)(3)(4).
En la primera lee el nombre de nuestro equipo (0x00402707), la compara con "hax0rz!~" y actúa en consecuencia.
En la segunda lee la version de OS (0x0040276a), la compara con "2.4.31" y actúa en consecuencia.
En la tercera lee el nombre de nuestra CPU (0x004027f2), la compara con "AMDisbetter!" y actúa en consecuencia.
Sabemos que todo programa guarda los inputs en posiciones de memoria del sistema, en el inicio del main, radare2 nos dice las posiciones de memoria de las variables (5), nos interesa local_130, en la posicion (0x410).
Como no cumplimos los requisitos tendremos que idearnoslas para hacerle creer al programa que lo cumplimos.
Para ello usaremos gdb:
# gdb skipper-64
# b *0x00402707
# b *0x0040276a
# b *0x004027f2 /*Ponemos lo breakpoints donde realiza la lectura*/
# x/s $rbp-0x410 /*Vemos lo que se ha guardado en la pila, en mi caso "kali" en la posición (0x7fffffffde70)*/
# set {char [9]} 0x7fffffffde70 = "hax0rz!~" /*Le damos el valor que el programa quiere*/
# c /*Continuar con el programa*/
# x/s $rbp-0x410
# set {char [7]} 0x7fffffffde70 = "2.4.31"
# c
# x/s $rbp-0x410
# set {char [13]} 0x7fffffffde70 = "AMDisbetter!"
# c
Podemos ver que tras pasar los tres controles el programa nos proporciona la flag (6), que es:

FLAG:f51579e9ca38ba87d71539a9992887ff